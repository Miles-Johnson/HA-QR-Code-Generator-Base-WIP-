// Generated by ts-to-zod
import { z } from "zod";
import { Json } from "./supabase";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable()
);

export const customersRowSchema = z.object({
  id: z.string(),
  stripe_customer_id: z.string().nullable(),
});

export const customersInsertSchema = z.object({
  id: z.string(),
  stripe_customer_id: z.string().optional().nullable(),
});

export const customersUpdateSchema = z.object({
  id: z.string().optional(),
  stripe_customer_id: z.string().optional().nullable(),
});

export const generationsRowSchema = z.object({
  batch: z.number(),
  checkpoint: z.string(),
  comfy_endpoint: z.string(),
  comfy_prompt_id: z.string(),
  created_at: z.string(),
  duration: z.number().nullable(),
  height: z.number(),
  id: z.number(),
  negative: z.string().nullable(),
  output_urls: jsonSchema.nullable(),
  positive: z.string().nullable(),
  template_id: z.number().nullable(),
  user_id: z.string(),
  width: z.number(),
});

export const generationsInsertSchema = z.object({
  batch: z.number().optional(),
  checkpoint: z.string(),
  comfy_endpoint: z.string(),
  comfy_prompt_id: z.string(),
  created_at: z.string().optional(),
  duration: z.number().optional().nullable(),
  height: z.number().optional(),
  id: z.number().optional(),
  negative: z.string().optional().nullable(),
  output_urls: jsonSchema.optional().nullable(),
  positive: z.string().optional().nullable(),
  template_id: z.number().optional().nullable(),
  user_id: z.string(),
  width: z.number().optional(),
});

export const generationsUpdateSchema = z.object({
  batch: z.number().optional(),
  checkpoint: z.string().optional(),
  comfy_endpoint: z.string().optional(),
  comfy_prompt_id: z.string().optional(),
  created_at: z.string().optional(),
  duration: z.number().optional().nullable(),
  height: z.number().optional(),
  id: z.number().optional(),
  negative: z.string().optional().nullable(),
  output_urls: jsonSchema.optional().nullable(),
  positive: z.string().optional().nullable(),
  template_id: z.number().optional().nullable(),
  user_id: z.string().optional(),
  width: z.number().optional(),
});

export const imagesRowSchema = z.object({
  created_at: z.string(),
  generation_id: z.number(),
  id: z.number(),
  image_url: z.string(),
  likes_count: z.number(),
  template_id: z.number().nullable(),
  user_id: z.string(),
});

export const imagesInsertSchema = z.object({
  created_at: z.string().optional(),
  generation_id: z.number(),
  id: z.number().optional(),
  image_url: z.string(),
  likes_count: z.number(),
  template_id: z.number().optional().nullable(),
  user_id: z.string(),
});

export const imagesUpdateSchema = z.object({
  created_at: z.string().optional(),
  generation_id: z.number().optional(),
  id: z.number().optional(),
  image_url: z.string().optional(),
  likes_count: z.number().optional(),
  template_id: z.number().optional().nullable(),
  user_id: z.string().optional(),
});

export const paymentsRowSchema = z.object({
  amount_total: z.number().nullable(),
  created_at: z.string(),
  customer_id: z.string().nullable(),
  email: z.string().nullable(),
  id: z.string(),
  user_id: z.string().nullable(),
});

export const paymentsInsertSchema = z.object({
  amount_total: z.number().optional().nullable(),
  created_at: z.string().optional(),
  customer_id: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  id: z.string(),
  user_id: z.string().optional().nullable(),
});

export const paymentsUpdateSchema = z.object({
  amount_total: z.number().optional().nullable(),
  created_at: z.string().optional(),
  customer_id: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  id: z.string().optional(),
  user_id: z.string().optional().nullable(),
});

export const productsRowSchema = z.object({
  active: z.boolean().nullable(),
  description: z.string().nullable(),
  id: z.string(),
  image: z.string().nullable(),
  metadata: jsonSchema.nullable(),
  name: z.string().nullable(),
});

export const productsInsertSchema = z.object({
  active: z.boolean().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string(),
  image: z.string().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  name: z.string().optional().nullable(),
});

export const productsUpdateSchema = z.object({
  active: z.boolean().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  image: z.string().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  name: z.string().optional().nullable(),
});

export const templatesRowSchema = z.object({
  active: z.boolean(),
  checkpoint: z.string(),
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.number(),
  image_url: z.string().nullable(),
  name: z.string(),
  negative: z.string(),
  order_rank: z.number(),
  positive: z.string(),
  prompt: z.string(),
  seed: z.number().nullable(),
  user_id: z.string().nullable(),
});

export const templatesInsertSchema = z.object({
  active: z.boolean().optional(),
  checkpoint: z.string(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.number().optional(),
  image_url: z.string().optional().nullable(),
  name: z.string(),
  negative: z.string(),
  order_rank: z.number(),
  positive: z.string(),
  prompt: z.string(),
  seed: z.number().optional().nullable(),
  user_id: z.string().optional().nullable(),
});

export const templatesUpdateSchema = z.object({
  active: z.boolean().optional(),
  checkpoint: z.string().optional(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.number().optional(),
  image_url: z.string().optional().nullable(),
  name: z.string().optional(),
  negative: z.string().optional(),
  order_rank: z.number().optional(),
  positive: z.string().optional(),
  prompt: z.string().optional(),
  seed: z.number().optional().nullable(),
  user_id: z.string().optional().nullable(),
});

export const usersRowSchema = z.object({
  avatar_url: z.string().nullable(),
  billing_address: jsonSchema.nullable(),
  created_at: z.string().nullable(),
  email: z.string(),
  full_name: z.string().nullable(),
  id: z.string(),
  likes_count: z.number().nullable(),
  payment_method: jsonSchema.nullable(),
  provider: z.string().nullable(),
  provider_id: z.string().nullable(),
  username: z.string().nullable(),
});

export const usersInsertSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  billing_address: jsonSchema.optional().nullable(),
  created_at: z.string().optional().nullable(),
  email: z.string(),
  full_name: z.string().optional().nullable(),
  id: z.string(),
  likes_count: z.number().optional().nullable(),
  payment_method: jsonSchema.optional().nullable(),
  provider: z.string().optional().nullable(),
  provider_id: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
});

export const usersUpdateSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  billing_address: jsonSchema.optional().nullable(),
  created_at: z.string().optional().nullable(),
  email: z.string().optional(),
  full_name: z.string().optional().nullable(),
  id: z.string().optional(),
  likes_count: z.number().optional().nullable(),
  payment_method: jsonSchema.optional().nullable(),
  provider: z.string().optional().nullable(),
  provider_id: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
});

export const pricingPlanIntervalSchema = z.union([
  z.literal("day"),
  z.literal("week"),
  z.literal("month"),
  z.literal("year"),
]);

export const pricingTypeSchema = z.union([
  z.literal("one_time"),
  z.literal("recurring"),
]);

export const subscriptionStatusSchema = z.union([
  z.literal("trialing"),
  z.literal("active"),
  z.literal("canceled"),
  z.literal("incomplete"),
  z.literal("incomplete_expired"),
  z.literal("past_due"),
  z.literal("unpaid"),
  z.literal("paused"),
]);

export const pricesRowSchema = z.object({
  active: z.boolean().nullable(),
  currency: z.string().nullable(),
  description: z.string().nullable(),
  id: z.string(),
  interval: pricingPlanIntervalSchema.nullable(),
  interval_count: z.number().nullable(),
  is_default: z.boolean().nullable(),
  is_metered: z.boolean().nullable(),
  metadata: jsonSchema.nullable(),
  product_id: z.string().nullable(),
  trial_period_days: z.number().nullable(),
  type: pricingTypeSchema.nullable(),
  unit_amount: z.number().nullable(),
});

export const pricesInsertSchema = z.object({
  active: z.boolean().optional().nullable(),
  currency: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string(),
  interval: pricingPlanIntervalSchema.optional().nullable(),
  interval_count: z.number().optional().nullable(),
  is_default: z.boolean().optional().nullable(),
  is_metered: z.boolean().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  product_id: z.string().optional().nullable(),
  trial_period_days: z.number().optional().nullable(),
  type: pricingTypeSchema.optional().nullable(),
  unit_amount: z.number().optional().nullable(),
});

export const pricesUpdateSchema = z.object({
  active: z.boolean().optional().nullable(),
  currency: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  interval: pricingPlanIntervalSchema.optional().nullable(),
  interval_count: z.number().optional().nullable(),
  is_default: z.boolean().optional().nullable(),
  is_metered: z.boolean().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  product_id: z.string().optional().nullable(),
  trial_period_days: z.number().optional().nullable(),
  type: pricingTypeSchema.optional().nullable(),
  unit_amount: z.number().optional().nullable(),
});

export const subscriptionsRowSchema = z.object({
  cancel_at: z.string().nullable(),
  cancel_at_period_end: z.boolean().nullable(),
  canceled_at: z.string().nullable(),
  created: z.string(),
  current_period_end: z.string(),
  current_period_start: z.string(),
  ended_at: z.string().nullable(),
  id: z.string(),
  metadata: jsonSchema.nullable(),
  price_id: z.string().nullable(),
  quantity: z.number().nullable(),
  status: subscriptionStatusSchema.nullable(),
  trial_end: z.string().nullable(),
  trial_start: z.string().nullable(),
  user_id: z.string(),
});

export const subscriptionsInsertSchema = z.object({
  cancel_at: z.string().optional().nullable(),
  cancel_at_period_end: z.boolean().optional().nullable(),
  canceled_at: z.string().optional().nullable(),
  created: z.string().optional(),
  current_period_end: z.string().optional(),
  current_period_start: z.string().optional(),
  ended_at: z.string().optional().nullable(),
  id: z.string(),
  metadata: jsonSchema.optional().nullable(),
  price_id: z.string().optional().nullable(),
  quantity: z.number().optional().nullable(),
  status: subscriptionStatusSchema.optional().nullable(),
  trial_end: z.string().optional().nullable(),
  trial_start: z.string().optional().nullable(),
  user_id: z.string(),
});

export const subscriptionsUpdateSchema = z.object({
  cancel_at: z.string().optional().nullable(),
  cancel_at_period_end: z.boolean().optional().nullable(),
  canceled_at: z.string().optional().nullable(),
  created: z.string().optional(),
  current_period_end: z.string().optional(),
  current_period_start: z.string().optional(),
  ended_at: z.string().optional().nullable(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  price_id: z.string().optional().nullable(),
  quantity: z.number().optional().nullable(),
  status: subscriptionStatusSchema.optional().nullable(),
  trial_end: z.string().optional().nullable(),
  trial_start: z.string().optional().nullable(),
  user_id: z.string().optional(),
});
